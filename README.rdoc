= dm-is-remixable

A rewrite of the wonderful dm-is-remixable[http://github.com/datamapper/dm-more/dm-is-remixable] gem by Cory O'Daniel.

== Goals

  # Provide an API that more closely matches that of dm's +has+ method.
  # Allow to pass additional query options to the generated relationships to/through remixables
  # Allow to declare relationships inside the remixable module.
  # Allow to declare class methods and instance methods in the remixable module
  # Rework remixing a module as intermediary for a m:m relationship
  # Provide a readable and easy to understand codebase.

== API ideas (not cut into stone at all, but promising)

  module Addressable

    extend DataMapper::Model

    is :remixable

    property :id,      Serial
    property :address, String, :nullable => false

    belongs_to :country
    has n, :phone_numbers

  end

  module Linkable

    extend DataMapper::Model

    is :remixable

    property :id,  Serial
    property :uri, URI

  end

  class Country

    include DataMapper::Resource

    property :id,   Serial
    property :name, String

  end

  class PhoneNumber

    include DataMapper::Resource

    property :id,     Serial
    property :number, String

  end

  class Person

    include DataMapper::Resource

    property :id,   Serial
    property :name, String

  end

  #
  # Relate a remixable module to the receiving class.
  #
  # @param [Fixnum] cardinality
  # @param [Symbol,String] relationship_name
  # @param [Hash] options
  #
  # @option options [Symbol,String,Model] :remixable
  # @option options [Symbol,String,Model] :model
  # @option options [Symbol,String,Model,Hash] :through
  #
  #
  # @example 1:1 remixable with default naming conventions
  #
  #   Person.remix 1, :address, 'PersonAddress', :remixable => :addressable
  #
  #   1) Defines the PersonAddress model and includes the Addressable module.
  #   2) Establishes the following relationships on the participating models.
  #
  #   Person.has 1, :address, 'PersonAddress', :target_key => [:person_id]
  #   PersonAddress.belongs_to :person, 'Person'
  #
  #
  #
  # @example 1:1 remixable with explicit options
  #
  #   Person.remix 1, :address, 'PersonAddress',
  #     :remixable  => :addressable,
  #     :target_key => [:human_id]
  #
  #   1) Defines the PersonAddress model and includes the Addressable module.
  #   2) Establishes the following relationships on the participating models.
  #
  #   Person.has 1, :address, 'PersonAddress', :target_key => [:human_id]
  #   PersonAddress.belongs_to :human, 'Person'
  #
  #
  #
  # @example 1:m remixables with default naming conventions
  #
  #   Person.remix n, :addresses, 'PersonAddress', :remixable => :addressable
  #
  #   1) Defines the PersonAddress model and includes the Addressable module.
  #   2) Establishes the following relationships on the participating models.
  #
  #   Person.has n, :addresses, 'PersonAddress', :target_key => [:person_id]
  #   PersonAddress.belongs_to :person, 'Person'
  #
  #
  #
  # @example 1:m remixables with explicit options
  #
  #   Person.remix n, :addresses, 'PersonAddress',
  #     :remixable  => :addressable,
  #     :target_key => [:human_id]
  #
  #   1) Defines the PersonAddress model and includes the Addressable module.
  #   2) Establishes the following relationships on the participating models.
  #
  #   Person.has n, :addresses, 'PersonAddress', :target_key => [:human_id]
  #   PersonAddress.belongs_to :human, 'Person'
  #
  #
  #
  # @example m:m through remixable with default naming conventions
  #
  #   Person.remix n, :references, 'Link', :through => :linkable
  #
  #   1) Defines the PersonReference model and includes the Linkable module.
  #   2) Establishes the following relationships on the participating models.
  #
  #   PersonReference.belongs_to :person
  #   PersonReference.belongs_to :link
  #
  #   Person.has n, :person_references, 'PersonReference'
  #   Link.has   n, :person_references, 'PersonReference'
  #
  #   Person.has n, :references, 'Link', :through => :person_references, :via => :link
  #
  #
  #
  # @example m:m through remixable with explicit options
  #
  #   Person.remix n, :references, 'Link',
  #     :through => [ :person_references, {
  #       :remixable  => :linkable,
  #       :model      => 'PersonReferenceLink', # defaults to 'PersonReference'
  #       :source_key => [:human_id],           # defaults to :person_id
  #       :target_key => [:reference_id]        # defaults to :link_id
  #     }
  #   ]
  #
  #   1) Defines the PersonReference model and includes the Linkable module.
  #   2) Establishes the following relationships on the participating models.
  #
  #   PersonReferenceLink.belongs_to :human, 'Person'
  #   PersonReferenceLink.belongs_to :reference, 'Link'
  #
  #   Person.has n, :person_links, 'PersonReferenceLink', :target_key => [:human_id]
  #   Link.has   n, :person_links, 'PersonReferenceLink', :target_key => [:reference_id]
  #
  #   Person.has n, :references, 'Link', :through => :person_references, :via => :reference
  #
  #
  #
  # @example self referential m:m through remixable (probably needs more work)
  #
  #   Person.remix n, :friends, 'Person',
  #     :through => [ :social_contacts, {
  #       :remixable  => :social_contact,
  #       :model      => 'Friendship',      # defaults to 'PersonReference'
  #       :source_key => [:person_id],      # defaults to :person_id
  #       :target_key => [:other_person_id] # defaults to :person_id
  #     }]
  #
  #   1) Defines the PersonReference model and includes the Linkable module.
  #   2) Establishes the following relationships on the participating models.
  #
  #   Friendship.belongs_to :person, 'Person'
  #   Friendship.belongs_to :other_person, 'Person'
  #
  #   Person.has n, :friendships, :model => 'Friendship', :target_key => [:person_id]
  #   Link.has   n, :friendships, :model => 'Friendship', :target_key => [:other_person_id]
  #
  #   Person.has n, :friends, :model => 'Person', :through => :friendships, :via => :other_person
  #
  def remix(cardinality, relationship_name, *args)
    # ...
  end

== Copyright

Copyright (c) 2009 Martin Gamsjaeger (snusnu). See LICENSE for details.
